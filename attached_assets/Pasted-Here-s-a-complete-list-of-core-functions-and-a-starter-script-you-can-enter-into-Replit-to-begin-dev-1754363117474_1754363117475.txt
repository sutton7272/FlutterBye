Here’s a complete list of core functions and a starter script you can enter into Replit to begin developing a web-based MVP for your pool cleaning marketplace (like Uber/Upwork for pool services). This will be a full-stack app using:
	•	Frontend: HTML + CSS + JavaScript (React-ready)
	•	Backend: Node.js with Express
	•	Database: SQLite for simplicity (can scale to PostgreSQL)
	•	Authentication: Simple email-based (with mock session handling)
	•	Payment placeholder: Stripe integration-ready

⸻

🔧 Features to Include

Customer-Side (Pool Owner)
	•	Sign up / log in
	•	Post job: address, time, pool size, chemical needs
	•	Choose service type (basic, deep, repair)
	•	Schedule one-time or recurring service
	•	View job history
	•	Rate cleaner

Cleaner-Side (Service Provider)
	•	Sign up / log in
	•	Set availability, location preferences
	•	View open jobs
	•	Accept/decline jobs
	•	Update job status (accepted → in progress → complete)
	•	Get paid (placeholder)
	•	Track earnings

Admin Panel
	•	View users, jobs, ratings
	•	Approve cleaners
	•	Resolve disputes (placeholder)

⸻

📁 Folder Structure

/poolpal
├── server.js
├── db.js
├── /public
│   └── index.html
├── /routes
│   ├── auth.js
│   ├── jobs.js
│   └── users.js
├── /views
│   ├── login.html
│   ├── dashboard.html
│   └── cleaner.html
├── /models
│   ├── user.js
│   ├── job.js
│   └── rating.js
├── /utils
│   └── authMiddleware.js
└── package.json


⸻

✅ Full Replit-Ready Code (MVP Starter)

1. server.js

const express = require('express');
const app = express();
const db = require('./db');
const authRoutes = require('./routes/auth');
const jobRoutes = require('./routes/jobs');
const userRoutes = require('./routes/users');
const cors = require('cors');

app.use(cors());
app.use(express.json());
app.use('/auth', authRoutes);
app.use('/jobs', jobRoutes);
app.use('/users', userRoutes);

app.get('/', (req, res) => {
  res.send('Welcome to PoolPal!');
});

const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


⸻

2. db.js

const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database(':memory:');

db.serialize(() => {
  db.run(`CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    email TEXT UNIQUE,
    password TEXT,
    is_cleaner INTEGER DEFAULT 0
  )`);

  db.run(`CREATE TABLE jobs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    cleaner_id INTEGER,
    date TEXT,
    service_type TEXT,
    status TEXT,
    address TEXT,
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(cleaner_id) REFERENCES users(id)
  )`);
});

module.exports = db;


⸻

3. routes/auth.js

const express = require('express');
const router = express.Router();
const db = require('../db');

// Mock session
let sessions = {};

router.post('/signup', (req, res) => {
  const { name, email, password, is_cleaner } = req.body;
  db.run(`INSERT INTO users (name, email, password, is_cleaner) VALUES (?, ?, ?, ?)`,
    [name, email, password, is_cleaner ? 1 : 0],
    function(err) {
      if (err) return res.status(500).send(err.message);
      sessions[this.lastID] = true;
      res.json({ id: this.lastID });
    });
});

router.post('/login', (req, res) => {
  const { email, password } = req.body;
  db.get(`SELECT * FROM users WHERE email = ? AND password = ?`, [email, password], (err, row) => {
    if (err) return res.status(500).send(err.message);
    if (row) {
      sessions[row.id] = true;
      res.json({ id: row.id });
    } else {
      res.status(401).send("Invalid login");
    }
  });
});

module.exports = router;


⸻

4. routes/jobs.js

const express = require('express');
const router = express.Router();
const db = require('../db');

// Create job
router.post('/create', (req, res) => {
  const { user_id, date, service_type, address } = req.body;
  db.run(`INSERT INTO jobs (user_id, date, service_type, status, address) VALUES (?, ?, ?, 'open', ?)`,
    [user_id, date, service_type, address],
    function(err) {
      if (err) return res.status(500).send(err.message);
      res.json({ job_id: this.lastID });
    });
});

// Cleaner accepts job
router.post('/accept', (req, res) => {
  const { job_id, cleaner_id } = req.body;
  db.run(`UPDATE jobs SET cleaner_id = ?, status = 'in progress' WHERE id = ?`, [cleaner_id, job_id], function(err) {
    if (err) return res.status(500).send(err.message);
    res.send('Job accepted');
  });
});

// Job complete
router.post('/complete', (req, res) => {
  const { job_id } = req.body;
  db.run(`UPDATE jobs SET status = 'complete' WHERE id = ?`, [job_id], function(err) {
    if (err) return res.status(500).send(err.message);
    res.send('Job marked as complete');
  });
});

module.exports = router;


⸻

5. routes/users.js

const express = require('express');
const router = express.Router();
const db = require('../db');

// Get user jobs
router.get('/:id/jobs', (req, res) => {
  const id = req.params.id;
  db.all(`SELECT * FROM jobs WHERE user_id = ? OR cleaner_id = ?`, [id, id], (err, rows) => {
    if (err) return res.status(500).send(err.message);
    res.json(rows);
  });
});

module.exports = router;


⸻

6. public/index.html (simple homepage)

<!DOCTYPE html>
<html>
<head>
  <title>PoolPal</title>
</head>
<body>
  <h1>Welcome to PoolPal</h1>
  <p><a href="/views/login.html">Log In / Sign Up</a></p>
</body>
</html>


⸻

🛠️ How to Run It in Replit
	1.	Go to Replit
	2.	Create a new Repl → choose Node.js
	3.	Add the files and folders above
	4.	Click “Run”
	5.	Test routes using Postman or a simple frontend

⸻

⚡ Optional Next Additions
	•	✅ JWT for real auth
	•	💳 Stripe payments
	•	📍 Google Maps API for geolocation and cleaner matching
	•	📸 Upload before/after photos (via Cloudinary or Firebase Storage)
	•	🧪 Convert to React frontend for scalability
	•	📦 Migrate to PostgreSQL

⸻

Would you like me to generate a React frontend, a mock admin panel, or a Figma-style UI flow next?