name: AWS Setup and Deploy FlutterBye

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Check existing AWS resources
      run: |
        echo "=== Checking existing AWS Elastic Beanstalk resources ==="
        echo "Applications:"
        aws elasticbeanstalk describe-applications --region us-east-2 || echo "No applications found"
        echo ""
        echo "Environments:"
        aws elasticbeanstalk describe-environments --region us-east-2 || echo "No environments found"
        
    - name: Create application if needed
      run: |
        if ! aws elasticbeanstalk describe-applications --application-names FlutterBye --region us-east-2 2>/dev/null; then
          echo "Creating FlutterBye application..."
          aws elasticbeanstalk create-application \
            --application-name FlutterBye \
            --description "FlutterBye Web3 Platform" \
            --region us-east-2
        else
          echo "FlutterBye application already exists"
        fi
        
    - name: Create environment
      run: |
        # Check if any environment exists for the FlutterBye application
        EXISTING_ENV=$(aws elasticbeanstalk describe-environments \
          --application-name FlutterBye \
          --region us-east-2 \
          --query 'Environments[0].EnvironmentName' \
          --output text 2>/dev/null || echo "None")
          
        if [ "$EXISTING_ENV" = "None" ] || [ "$EXISTING_ENV" = "" ]; then
          echo "Creating new environment: flutterbye-production"
          aws elasticbeanstalk create-environment \
            --application-name FlutterBye \
            --environment-name flutterbye-production \
            --solution-stack-name "64bit Amazon Linux 2023 v6.1.6 running Node.js 20" \
            --option-settings \
              Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t3.micro \
              Namespace=aws:elasticbeanstalk:environment,OptionName=EnvironmentType,Value=SingleInstance \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=NODE_ENV,Value=production \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=PORT,Value=8080 \
            --region us-east-2
            
          echo "Waiting for environment to be ready..."
          aws elasticbeanstalk wait environment-updated \
            --application-name FlutterBye \
            --environment-names flutterbye-production \
            --region us-east-2
        else
          echo "Using existing environment: $EXISTING_ENV"
          echo "ENVIRONMENT_NAME=$EXISTING_ENV" >> $GITHUB_ENV
        fi
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Create deployment package
      run: |
        zip -r flutterbye-deployment.zip . \
          -x "*.git*" \
          -x "*node_modules*" \
          -x "*attached_assets*" \
          -x "*.local*" \
          -x "*dist/client*" \
          -x "*.md" \
          -x "*.yml"
      
    - name: Deploy to Elastic Beanstalk
      run: |
        # Get the environment name
        ENV_NAME=$(aws elasticbeanstalk describe-environments \
          --application-name FlutterBye \
          --region us-east-2 \
          --query 'Environments[0].EnvironmentName' \
          --output text)
          
        echo "Deploying to environment: $ENV_NAME"
        
        # Create application version
        aws elasticbeanstalk create-application-version \
          --application-name FlutterBye \
          --version-label "v${{ github.run_number }}-$(date +%s)" \
          --source-bundle S3Bucket="",S3Key="" \
          --region us-east-2
          
        # Upload deployment package
        aws s3 cp flutterbye-deployment.zip s3://elasticbeanstalk-us-east-2-$(aws sts get-caller-identity --query Account --output text)/flutterbye-deployment-${{ github.run_number }}.zip
        
        # Update application version with S3 location
        aws elasticbeanstalk create-application-version \
          --application-name FlutterBye \
          --version-label "deploy-${{ github.run_number }}" \
          --source-bundle S3Bucket="elasticbeanstalk-us-east-2-$(aws sts get-caller-identity --query Account --output text)",S3Key="flutterbye-deployment-${{ github.run_number }}.zip" \
          --region us-east-2
          
        # Deploy the version
        aws elasticbeanstalk update-environment \
          --application-name FlutterBye \
          --environment-name "$ENV_NAME" \
          --version-label "deploy-${{ github.run_number }}" \
          --region us-east-2
          
    - name: Get deployment URL
      run: |
        ENV_NAME=$(aws elasticbeanstalk describe-environments \
          --application-name FlutterBye \
          --region us-east-2 \
          --query 'Environments[0].EnvironmentName' \
          --output text)
          
        URL=$(aws elasticbeanstalk describe-environments \
          --application-name FlutterBye \
          --environment-names "$ENV_NAME" \
          --region us-east-2 \
          --query 'Environments[0].CNAME' \
          --output text)
          
        echo "üöÄ FlutterBye deployed successfully!"
        echo "üåê Application URL: http://$URL"
        echo "üìù Environment: $ENV_NAME"